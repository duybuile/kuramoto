summary(fit1)
fit2 <- lm(mpg ~ factor(am), mtcars)
deviance(fit2)
summary(fit1)
t.test(fit1)
t.test(mpg ~ factor(am), mtcars)
t.test(mpg ~ factor(am), mtcars,alternative = "greater")
residuals(fit)
fitted(fit)
fit1 <- lm(mpg ~ wt + qsec + am, mtcars)
summary(fit1)
summary(lm(mpg ~ wt + qsec + factor(am), mtcars))
library(MASS); step <- stepAIC(lm(mpg ~., mtcars), direction = "both")
names(step)
step$model
fit$coefficients[2]
fit1$coefficients[2]
fit1 <- lm( mpg ~ factor(am) + wt + qsec, mtcars)
summary(fit1)
library(lubridate)
bw.tel <- read.csv("bwTel.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.tel.newPol <- subset(bw.tel, bw.tel$Transact == "NEWP")
bw.tel.renwal <- subset(bw.tel, bw.tel$Transact == "RNWP")
bw.tel.rebrok <- subset(bw.tel, bw.tel$Transact == "RBRP")
table(duplicated(bw.tel$Client.Cde))
table(duplicated(bw.tel.newPol$Client.Cde))
bw.tel <- subset(bw.tel, bw.tel$Post.Date >= as.Date("2014-01-01") & bw.tel$Post.Date <= as.Date("2014-12-31"))
bw.tel <- read.csv("bwTel.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.tel$Post.Date >= as.Date("2014-01-01")
table(bw.tel$Post.Date >= as.Date("2014-01-01"))
table(as.Date(bw.tel$Post.Date, %d/%m/%y) >= as.Date("2014-01-01"))
as.Date(bw.tel$Post.Date, %d-/%m-/%y) >= as.Date("2014-01-01")
table(as.Date(bw.tel$Post.Date, %d-%m-%y) >= as.Date("2014-01-01"))
table(as.Date(bw.tel$Post.Date, %d/%m/%Y) >= as.Date("2014-01-01"))
mdy(bw.tel$Post.Date)
mdy?
a
?mdy
head(dmy(bw.tel$Post.Date))
table(dmy(bw.tel$Post.Date) >= as.Date("2014-01-01"))
table(dmy(bw.tel$Post.Date) >= ymd("2014-01-01"))
bw.tel <- subset(bw.tel, dmy(bw.tel$Post.Date) >= ymd("2014-01-01") & dmy(bw.tel$Post.Date) <= ymd("2014-12-31"))
bw.tel <- subset(bw.tel, bw.tel$X == "")
bw.tel.newPol <- subset(bw.tel, bw.tel$Transact == "NEWP")
bw.tel.renwal <- subset(bw.tel, bw.tel$Transact == "RNWP")
bw.tel.rebrok <- subset(bw.tel, bw.tel$Transact == "RBRP")
table(duplicated(bw.tel.newPol$Client.Cde))
bw.tel.newPol <- subset(bw.tel.newPol, duplicated(bw.tel.newPol$Client.Cde) == FALSE)
bw.tel.renwal <- subset(bw.tel.renwal, duplicated(bw.tel.renwal$Client.Cde) == FALSE)
bw.tel.rebrok <- subset(bw.tel.rebrok, duplicated(bw.tel.rebrok$Client.Cde) == FALSE)
bw.tel.newPol$month <- month(bw.tel.newPol$Post.Date)
bw.tel.renwal$month <- month(bw.tel.renwal$Post.Date)
bw.tel.rebrok$month <- month(bw.tel.rebrok$Post.Date)
table(bw.tel.newPol$month)
table(bw.tel.renwal$month)
table(bw.tel.rebrok$month)
bw.tel <- read.csv("bwTel.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.tel.rn2015 <- subset(bw.tel, dmy(bw.tel$Effective.Date) >= ymd("2014-01-01")
& dmy(bw.tel$Effective.Date) <= ymd("2014-12-31") )
bw.tel.rn2015 <- subset(bw.tel.rn2015$X == "")
bw.tel.rn2015 <- subset(bw.tel.rn2015, bw.tel.rn2015$X == "")
bw.tel.rn2015 <- subset(bw.tel.rn2015, bw.tel.rn2015$Transact == "RNWP"
|bw.tel.rn2015$Transact == "NEWP"
|bw.tel.rn2015$Transact == "RBRP")
bw.tel.rn2015 <- subset(bw.tel.rn2015, duplicated(bw.tel.rn2015$Client.Cde) == FALSE)
bw.tel.rn2015$month <- month(bw.tel.rn2015$Effective.Date)
table(bw.tel.rn2015$month)
bw <- read.csv("bw2014.csv.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw <- read.csv("bw2014.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw <- subset(bw, bw$X == "")
bw.newPol <- subset(bw, bw$Transact == "NEWP")
bw.renwal <- subset(bw, bw$Transact == "RNWP")
bw.rebrok <- subset(bw, bw$Transact == "RBRP")
bw.newPol <- subset(bw.newPol, duplicated(bw.newPol$Client.Cde) == FALSE)
bw.renwal <- subset(bw.renwal, duplicated(bw.renwal$Client.Cde) == FALSE)
bw.rebrok <- subset(bw.rebrok, duplicated(bw.rebrok$Client.Cde) == FALSE)
bw.newPol$month <- month(bw.newPol$Post.Date)
bw.renwal$month <- month(bw.renwal$Post.Date)
bw.rebrok$month <- month(bw.rebrok$Post.Date)
table(bw.newPol$month)
table(bw.renwal$month)
table(bw.rebrok$month)
bw <- read.csv("bw2014.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
bw.newPol <- subset(bw, bw$Transact == "NEWP")
bw.renwal <- subset(bw, bw$Transact == "RNWP")
bw.rebrok <- subset(bw, bw$Transact == "RBRP")
bw.newPol <- subset(bw.newPol, duplicated(bw.newPol$Client.Cde) == FALSE)
bw.renwal <- subset(bw.renwal, duplicated(bw.renwal$Client.Cde) == FALSE)
bw.rebrok <- subset(bw.rebrok, duplicated(bw.rebrok$Client.Cde) == FALSE)
bw.newPol$month <- month(bw.newPol$Post.Date)
bw.renwal$month <- month(bw.renwal$Post.Date)
bw.rebrok$month <- month(bw.rebrok$Post.Date)
table(bw.newPol$month)
table(bw.renwal$month)
table(bw.rebrok$month)
tail(bw$Post.Date)
swirl()
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
main()
swirl()
datahub <- read.csv("test_datahub_PC_May.csv", header = TRUE)
electra <- read.csv("test_Electra_PC_May01-04.csv", header = TRUE)
diff <- setdiff(datahub$policy_id, electra$Customer.ID)
inter <- intersect(datahub$policy_id, electra$Customer.ID)
View(datahub)
View(electra)
a <- readline("buswrite.prt")
a <- readLines("buswrite.prt")
a <- read.table("buswrite.prt")
a <- read.table("buswrite.prt",sep = "\t", fill = TRUE, header = TRUE)
View(a)
a <- read.table("buswrite.prt",sep = "|", fill = TRUE, header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE)
a <- read.table("buswrite.prt",sep = "|",header = FALSE, stringsAsFactors = FALSE)
a <- read.table("buswrite.prt",sep = "|",header = TRUE, stringsAsFactors = FALSE)
scan("buswrite.prt")
a <- readLines("buswrite.prt")
?read.fwf
a <- read.fwf("buswrite.prt")
a <- read.csv("buswrite.prt",sep = "|",header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/analysis-research/trip-csv-generator")
WORKSPACE <- getwd()
FILENAME <- "autoline-tripdata.csv"
tripdata <- read.csv(FILENAME, header = TRUE, sep = ",")
View(tripdata)
View(tripdata)
tripdata <- subset(tripdata, select = c("sub_id", "trip_time", "trip_distance", "accel_aggregate", "accel_events",
"brake_aggregate", "brake_events", "bend_aggregate", "bend_events",
"turn_aggregate", "turn_events", "speed_aggregate", "speed_events",
"corner_aggregate", "corner_events"))
View(tripdata)
setwd("~/")
a <- read.table("buswrite.prt", header = "FALSE", sep = "|")
a <- read.table("buswrite.prt", sep = "|")
View(a)
a <- scan("buswrite.prt", sep = "|")
a <- scan("buswrite.prt", sep = "|", na.strings = FALSE)
a <- scan("buswrite.prt", sep = "|", na.strings = TRUE)
a <- read.table("buswrite.prt", sep = "|")
a <- read.csv("May_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("May_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
a <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
b <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
b <- subset(b, b$Insurer == "AVT" | b$Insurer == "AXT")
table(duplicated(a$policy_id))
table(duplicated(b$Customer.ID))
setdiff(a$policy_id, b$Customer.ID)
diff <- subset(a, a$policy_id %in% setdiff(a$policy_id, b$Customer.ID))
View(diff)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(month_datahub$policy_id))
table(duplicated(month_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
intersect(diff$policy_id, year_elccanl$Customer.ID)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
)
inte <- subset(year_elccanl, year_elccanl$policy_id %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
View(m)
strftime(m$renewal_date[1],"%d/%m/%Y")
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
View(m)
setwd("~/")
library(xlsx2)
library(xlsx)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE)
year_datahub <- read.csv("2015_AVTAXT_DataHub.csv", header = TRUE)
year_electra <- read.csv("2015_AVTAXT_Electra.csv", header = TRUE)
year_elccanl <- read.csv("2015_AVTAXT_Electra_Can.csv", header = TRUE)
year_electra <- subset(year_electra, year_electra$Insurer == "AVT" | year_electra$Insurer == "AXT", select = 1:76)
table(duplicated(year_datahub$policy_id))
table(duplicated(year_electra$Customer.ID))
diff <- subset(year_datahub, year_datahub$policy_id %in% setdiff(year_datahub$policy_id, year_electra$Customer.ID))
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Inception.Date", "Expiry.Date", "Renewal.Date", "Policy.Number",
"Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
inte <- subset(year_elccanl, year_elccanl$Customer.ID %in% intersect(diff$policy_id, year_elccanl$Customer.ID),
select = c("Customer.ID", "Insurer", "Renewal.Date", "Policy.Number", "Policy.Status"))
m <- merge(x = diff, y = inte, by.x = "policy_id", by.y="Customer.ID", all.y = TRUE)
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
m$renewal_date <- strftime(m$renewal_date,"%d/%m/%Y")
write.xlsx(m, file = "Difference.xlsx", sheetName = "Difference", col.names = TRUE, row.names = FALSE, append = TRUE)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
setwd("~")
a <- read.csv("buswrite.prt", sep = "|", header = FALSE)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
table(a$record_type)
a <- read.csv("buswrite.prt", sep = "|", header = FALSE, stringsAsFactors = FALSE, strip.white = FALSE)
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description", "special_cancellation")
names(a) <- c("record_type", "client_code", "client_name", "policy_id", "transaction_reference", "transaction_date",
"insurer", "transaction_code", "policy_type", "policy_number", "transaction_value",
"debit_indicator_1", "commission", "debit_indicator_2", "net_amount", "debit_indicator_3",
"charges", "debit_indicator_4", "status_description", "employee_id", "source_of_business",
"cancellation_description")
table(a$record_type)
table(a$debit_indicator_1)
table(a$debit_indicator_2)
table(a$debit_indicator_3)
table(a$debit_indicator_4)
charge_debit <- subset(a, a$debit_indicator_4 == "D")
head(charge_debit)
head(charge_debit, 10)
test <- subset(a, a$debit_indicator_2 == "D" & a$transaction_value > 0)
head(test)
test <- subset(a, a$debit_indicator_4 == "D" & a$transaction_value > 0)
write.csv(a, "a.csv", col.names = F, row.names = F)
library(xlsx)
write.xlsx(a, "a.xls", col.names = F, row.names = F)
write.xlsx2(a, "a.xls", sheetNames = "a", col.names = F, row.names = F)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value = 0)
test <- subset(a, a$debit_indicator_1 == "D" & a$transaction_value == 0)
test <- subset(a, a$debit_indicator_2 == "D" & a$commission == 0)
test <- subset(a, a$debit_indicator_3 == "D" & a$net_amount == 0)
test <- subset(a, a$debit_indicator_4 == "D" & a$charges == 0)
test <- subset(a, a$debit_indicator_4 == "" & a$charges > 0)
head(test)
test <- subset(a, a$debit_indicator_3 == "" & a$net_amount> 0)
head(test)
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
shiny::runApp('C:/Users/duy.bui/OneDrive/Courses/Capstone Project/Program/shinyapps')
x <- c(1, 2, 4, 0)
y <- c(0.5,1,2,0)
fit <- lm(y~x)
print(fit)
-1 + 2*6
a = as.matrix(4, 3, 6, 9)
View(a)
matrix(c(4,3,6,9), nrow = 2, ncol = 2)
matrix(c(4,6,3,9), nrow = 2, ncol = 2)
u = matrix(c(4, -4, 3), nrow = 3, ncol = 1)
v = matrix(c(4, 2, 4), nrow = 3, ncol = 1)
t(u)*v
t(u)
x = t(u)
x = as.matrix(t(u))
x*u
4*4+(-4)*2+(-3)*4
x %*% u
x %*% v
x
u = matrix(c(4, -4, -3), nrow = 3, ncol = 1)
t(u)%*%v
duy <- c(343150, 342790, 343234, 297477, 313996, 340309, 343670, 331687, 343915, 343326, 343881, 344129, 342199, 336371, 343386, 337009, 344265, 342940, 341928, 343940, 343935, 341001, 344646, 343071, 318677, 307656, 340460, 343671, 343737, 343807, 344533, 288222, 345074, 345582, 345758, 337208, 345914, 345840, 317103, 343951, 340503, 294280, 341784, 345372, 344279, 346932, 313419, 346909, 346912, 345763, 345456, 347234, 347298, 298957, 347042, 343203, 345827, 346207, 333855, 346385, 347805, 347841, 347522, 345701, 321218, 347932, 346332, 346864, 347682, 343667, 340152, 347910, 347031, 347982, 348257, 347766, 348457, 348676, 348238, 348218, 348541, 103137, 348413, 348694, 346475, 348418, 348530, 345638, 346914, 348620, 348740, 278106, 322097, 348496, 343707, 348055, 349163, 347136, 323094, 349102, 349106, 321452, 304317, 347383, 347849, 349123, 344320, 300544, 348929, 346017, 349303, 297735, 347912, 324639, 349061, 349357, 348952)
david <- c(323434, 301155, 285568, 319478, 300018, 281838, 128886, 323012, 296093, 306371, 306643, 281771, 307711, 306968, 333385, 334894, 217208, 305119, 337928, 337502, 339893, 339463, 315188, 271801, 293059, 296068, 316783, 317193, 337371, 343166, 341603, 343419, 317417, 295333, 274030, 326494, 327094, 342033, 343594, 279300, 343396, 342658, 343640, 342537, 335274, 342072, 238354, 295092, 313925, 292110, 342336, 318156, 344537, 318556, 344441, 343647, 344572, 344111, 344628, 342898, 295748, 343380, 344978, 343053, 294748, 344578, 319018, 327790, 344313, 296521, 244510, 345190, 319363, 343739, 344582, 294403, 344635, 295737, 345370, 312627, 318604, 297016, 319375, 296069, 345641, 224089, 294647, 345718, 319879, 320903, 345617, 345954, 341033, 333234, 324479, 346123, 345925, 297235, 320250, 316730, 320273, 306651, 346236, 344292, 296209, 339653, 320206, 345853, 340164, 345238, 346057, 346012, 345549, 319676, 313772, 346415, 346347, 320626, 311539, 346220, 346647, 293252, 346361, 346296, 296119, 346643, 346993, 346911, 346813, 346957, 346936, 346804, 345601, 297900, 347009, 346921, 345816, 346933, 320833, 320774, 328999, 321053, 321390, 337569, 342836, 347128, 347195, 347475, 346558, 320684, 346659, 346758, 319826, 337842, 321817, 345796, 321802, 298160, 346300, 347945, 343508, 321957, 321460, 347141, 348143, 348165, 348127, 343513, 321313, 317212, 341348, 317859, 347037, 348094, 322211, 118874, 322300, 348406, 322081, 348068, 319754, 348511, 348593, 348384, 348198, 346038, 348499, 335368, 348410, 345092, 346417, 348070, 347927, 347993, 345581, 346371, 346703, 340572, 347787, 347571, 348802, 348278, 313478, 319364, 346589, 349013, 348939, 202990, 349015, 320919, 322885, 348396, 334468, 348349, 348124, 316674, 348948, 349429, 347098, 299159, 349468, 348961, 349021, 349295, 297889, 278690, 349537, 349438, 323618, 347122, 349835, 349895, 323988, 349407, 321049, 348705, 338957, 349869, 348997, 340005, 333655, 350074, 349948, 230056, 312616, 349262, 350095, 348661, 349508, 348794, 115833, 324746, 323487, 346406, 319099)
intersect(x, y)
intersect(duy, david)
diff(duy, david)
setdiff(duy, david)
n = setdiff(duy, david)
.libPaths()
Sys.getenv()
.libPaths()
as.Date(18918, origin="1899-12-30")
library(xlsx)
library(xlsx)
setwd("C:/Users/duy.bui/Documents/GitHub/kuramoto")
WORKSPACE <- getwd()
library(igraph)
library(knitr)
# The following graph was prepared the same way as with 10% and 50% of data but with 100% of data.
load("jira_graph.Rdata")
fc <- fastgreedy.community(jira_graph, weights = E(jira_graph)$weight)
nrow(sizes(fc))
modularity(fc)
# Retrieve the community from fast greedy (there are 842 communities)
com <- communities(fc)
# Retrieve the unique task id from the data
unique_task <- unique(jira$Task.Id)
# Remove any task elements from each community
working_groups <- lapply(com, function(x){setdiff(unlist(x), unique_task)})
jira <- read.csv(file = paste(WORKSPACE, "jira.csv", sep = "/"), header = TRUE, sep = ",",
stringsAsFactors = FALSE, strip.white = TRUE)
tasks <- read.csv(file = paste(WORKSPACE, "effort_on_tasks.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
repos <- read.csv(file = paste(WORKSPACE, "effort_on_repos.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
# Retrieve the community from fast greedy (there are 842 communities)
com <- communities(fc)
# Retrieve the unique task id from the data
unique_task <- unique(jira$Task.Id)
# Remove any task elements from each community
working_groups <- lapply(com, function(x){setdiff(unlist(x), unique_task)})
t <- aggregate(Worker.ID ~ Coding.Effort, data = repos, FUN = SUM)
t <- aggregate(Worker.ID ~ Coding.Effort, data = repos, FUN = SUM())
t <- aggregate(Worker.ID ~ Coding.Effort, data = repos, FUN = sum)
View(t)
t <- aggregate(Coding.Effort ~ Worker.ID, data = repos, FUN = sum)
View(t)
length(unique(jira$Worker.Id))
length(unique(repos$Worker.ID))
length(unique(tasks$Worker.ID))
table(t$Coding.Effort == 0)
medium(t$Coding.Effort)
median(t$Coding.Effort)
mean(t$Coding.Effort)
hist(t$Coding.Effort)
t_0 <- subset(t, t$Coding.Effort != 0)
hist(t_0)
hist(t_0$Coding.Effort)
hist(t$Coding.Effort)
hist(t$Coding.Effort, breaks = 10)
hist(t$Coding.Effort, breaks = 100)
hist(t_0$Coding.Effort, breaks = 100)
quantile(t_0$Coding.Effort, 0.5)
quantile(t_0$Coding.Effort, 0.6)
quantile(t_0$Coding.Effort, 0.2)
quantile(t_0$Coding.Effort, 0.3)
work_code <- aggregate(Coding.Effort ~ Worker.ID, data = repos, FUN = sum)
nrow(work_code)
nrow(unique(jira$Worker.Id))
unique(jira$Worker.Id)
length(unique(jira$Worker.Id))
hist(dev_test$Coding.Effort, breaks = 100, main = "Histogram of testers and developers", xlab = "Coding effort")
abline(h = 0, v = quantile(dev_test$Coding.Effort, 0.3))
dev_test <- subset(work_code, work_code$Coding.Effort !=0)
hist(dev_test$Coding.Effort, breaks = 100, main = "Histogram of testers and developers", xlab = "Coding effort")
abline(h = 0, v = quantile(dev_test$Coding.Effort, 0.3))
hist(dev_test$Coding.Effort, breaks = 100, main = "Histogram of testers and developers", xlab = "Coding effort")
abline(h = 0, v = quantile(dev_test$Coding.Effort, 0.3), col = "red")
hist(dev_test$Coding.Effort, breaks = 100, main = "Histogram of testers and developers", xlab = "Coding effort")
abline(v = quantile(dev_test$Coding.Effort, 0.3), col = "red")
jira_workers <- unique(jira$Worker.Id)
jira_workers$role = "Reviewers"
threshold = quantile(dev_test$Coding.Effort, 0.3)
dev_test$role = "" # initialise
dev_test[dev_test$Coding.Effort == 0, role] = "Reviewers"
dev_test[dev_test$Coding.Effort == 0, "role"] = "Reviewers"
dev_test[dev_test$Coding.Effort > threshold, "role"] = "Developers"
dev_test[dev_test$Coding.Effort <= threshold & dev_test$Coding.Effort > 0, "role"] = "Testers"
View(dev_test)
jira_workers <- data.frame(unique(jira$Worker.Id), role = "")
View(jira_workers)
jira <- read.csv(file = paste(WORKSPACE, "jira.csv", sep = "/"), header = TRUE, sep = ",",
stringsAsFactors = FALSE, strip.white = TRUE)
tasks <- read.csv(file = paste(WORKSPACE, "effort_on_tasks.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
repos <- read.csv(file = paste(WORKSPACE, "effort_on_repos.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
# Remove missing values
jira <- subset(jira, !is.na(jira$Worker.Id) & !is.na(jira$Task.Id))
repos <- subset(repos, !is.na(repos$Worker.ID))
tasks <- subset(tasks, !is.na(tasks$Worker.ID) & tasks$Task.id != "")
# Deselect unneccessary data fields
jira <- subset(jira, select = c("Worker.Id", "Task.Id"))
repos <- subset(repos, select = -c(Month..Day..Year.of.Date))
tasks <- subset(tasks, select = -c(Date))
work_code <- aggregate(Coding.Effort ~ Worker.ID, data = repos, FUN = sum)
# number of workers who have coding effort
nrow(work_code)
# number of unique workers on Jira database
length(unique(jira$Worker.Id))
# Subset the developers and testers only
dev_test <- subset(work_code, work_code$Coding.Effort !=0)
hist(dev_test$Coding.Effort, breaks = 100, main = "Histogram of testers and developers", xlab = "Coding effort")
abline(v = quantile(dev_test$Coding.Effort, 0.3), col = "red")
jira_workers <- data.frame(unique(jira$Worker.Id), role = "")
jira_workers <- data.frame(Worker.ID = unique(jira$Worker.Id), role = "Reviewers")
work_code[role == "Reviewers", work_code$Worker.ID]
jira_workers[jira_workers$Worker.ID %in% work_code[role == "Reviewers", "Worker.ID"]]
work_code[work_code$role == "Reviewers", "Worker.ID"]
work_code[role=="Reviewers",]
View(work_code)
threshold = quantile(dev_test$Coding.Effort, 0.3)
work_code$role = "" # initialise
work_code[work_code$Coding.Effort == 0, "role"] = "Reviewers"
work_code[work_code$Coding.Effort > threshold, "role"] = "Developers"
work_code[work_code$Coding.Effort <= threshold & work_code$Coding.Effort > 0, "role"] = "Testers"
View(work_code)
work_code[work_code$role=="Reviewers","Worker.ID"]
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort == 0,"Worker.ID"],"role"] = "Reviewers"
View(jira_workers)
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort > threshold,"Worker.ID"],"role"] = "Developers"
work_code[work_code$Coding.Effort > threshold,"Worker.ID"]
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort > threshold,"Worker.ID"],"role"] = "Developers"
View(jira_workers)
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$role=="Developers","Worker.ID"],"role"] = "Developers"
jira_workers <- data.frame(Worker.ID = unique(jira$Worker.Id), role = "")
jira_workers <- data.frame(Worker.ID = unique(jira$Worker.Id), role = character(3))
jira_workers$role <- as.character(jira_workers$role)
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort == 0,"Worker.ID"],"role"] = "Reviewers"
View(jira_workers)
jira_workers <- data.frame(Worker.ID = unique(jira$Worker.Id), role = "Reviewers")
jira_workers$role <- as.character(jira_workers$role)
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort > threshold,"Worker.ID"],"role"] = "Developers"
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort <= threshold & work_code$Coding.Effort > 0,"Worker.ID"],"role"] = "Testers"
View(jira_workers)
table(jira_workers$role)
length(setdiff(jira$Worker.Id, work_code$Worker.ID))
length(intersect(jira$Worker.Id, work_code$Worker.ID))
length(intersect(unique(jira$Worker.Id)), unique(tasks$Worker.ID))
length(intersect(unique(jira$Worker.Id), unique(tasks$Worker.ID)))
View(work_code)
length(intersect(unique(tasks$Worker.Id), unique(repos$Worker.ID)))
length(intersect(unique(tasks$Worker.ID), unique(repos$Worker.ID)))
jira_workers <- data.frame(Worker.ID = unique(jira$Worker.Id), role = "")
jira_workers$role <- as.character(jira_workers$role)
# Take the threshold at 30%
threshold = quantile(dev_test$Coding.Effort, 0.3)
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort == 0,"Worker.ID"],"role"] = "Reviewers"
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort > threshold,"Worker.ID"],"role"] = "Developers"
jira_workers[jira_workers$Worker.ID %in% work_code[work_code$Coding.Effort <= threshold & work_code$Coding.Effort > 0,"Worker.ID"],"role"] = "Testers"
View(jira_workers)
table(jira_workers$role)
size = sapply(working_groups, function(x){length(unlist(x))})
which(size == 1) # people who work alone
size == 1 # people who work alone
lapply(working_groups, function(x){x[[length(unlist(x)==1)]]})
team <- lapply(working_groups, function(x){x[[length(unlist(x)==1)]]})
length(working_groups[[1]])
working_groups[[1]]
length(working_groups[[1]])
team <- lapply(working_groups, function(x){length((x)==1)})
team <- lapply(working_groups, function(x){length((x))})
size = sapply(working_groups, function(x){length(unlist(x))})
team <- lapply(working_groups, `[`, length() == 1)
team <- lapply(working_groups, `[`, function(x){length(x) == 1})
cond <- sapply(working_groups, function(x) length(x) == 1 )
working_groups[cond]
t <- working_groups[cond]
team <- working_groups[-cond]
team <- working_groups[!cond]
Sys.which("pdflatex")
sessionInfo()
set.seed(3223)
jira_sample_10 <- jira[sample(nrow(jira), nrow(jira)*0.1), ]
# Create an edge-list data frame
jira_edgeweight_10 <- as.data.frame(table(jira_sample_10))
# Deselect any edge with weight as 0.
jira_edgeweight_10 <- subset(jira_edgeweight_10, jira_edgeweight_10$Freq > 0)
# Generate a graph with vertices and edges
jira_graph_10 <- graph_from_edgelist(as.matrix(jira_edgeweight_10[,1:2]), directed = FALSE)
# Add weight into each edge
E(jira_graph_10)$weight = jira_edgeweight_10[,3]
# Fast greedy community detection
fc_10 <- fastgreedy.community(jira_graph_10, weights = E(jira_graph_10)$weight)
nrow(sizes(fc_10))
modularity(fc_10)
# Walktrap community detection
wt_10 <- walktrap.community(jira_graph_10, weights = E(jira_graph_10)$weight)
nrow(sizes(wt_10))
modularity(wt_10)
lp_10 <- label.propagation.community(jira_graph_10, weights = E(jira_graph_10)$weight)
nrow(sizes(lp_10))
modularity(lp_10)
ic_10 <- infomap.community(jira_graph_10, e.weights = E(jira_graph_10)$weight)
nrow(sizes(ic_10))
modularity(ic_10)
rm(jira_edgeweight_10, jira_graph_10, jira_sample_10, fc_10, wt_10, lp_10, ic_10)
load("jira_graph_50.Rdata")
fc_50 <- fastgreedy.community(jira_graph_50, weights = E(jira_graph_50)$weight)
nrow(sizes(fc_50))
modularity(fc_50)
# Walktrap community detection
wt_50 <- walktrap.community(jira_graph_50, weights = E(jira_graph_50)$weight)
nrow(sizes(wt_50))
modularity(wt_50)
