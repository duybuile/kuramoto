dir.create("testdir2/testdir3", recursive = TRUE )
unlink("testdir2", recursive = FALSE)
unlink("testdir2", recursive = TRUE)
old.dir
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1, 20)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Duy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data = NA
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints >0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
sha[e_mat]
shape_mat]
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
exit()
quit()
swirl()
library(swirl)
swirl()
3
3
q()
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
f;ips <- sample(c(0,1),100, replace = TRUE)
flips <- sample(c(0,1),100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean = 100, sd = 25)
rnorm(10,mean = 100, sd = 25)
rpois(5, lambda = 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(replicate(5, rpois(5, 10)))
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXct(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(Cars)
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(dist  ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = "red")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
data(ToothGrowth)
head(ToothGrowth)
hist(ToothGrowth$len)
hist(ToothGrowth$len, main = "Histogram of tooth length")
summary(ToothGrowth)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
oj <- subset(x = ToothGrowth, supp == "OJ", select = "len")
oj <- as.numeric(unlist(oj))
vc <- subset(x = ToothGrowth, supp == "VC", select = "len")
vc <- as.numeric(unlist(vc))
t.test(oj, vc, paired =TRUE)
g0 <- subset(x = ToothGrowth, dose == 0.5, select = "len")
g0 <- as.numeric(unlist(g0))
g1 <- subset(x = ToothGrowth, dose == 1, select = "len")
g1 <- as.numeric(unlist(g1))
g2 <- subset(x = ToothGrowth, dose == 2, select = "len")
g2 <- as.numeric(unlist(g2))
t.test(g2, g1, paired =TRUE)
t.test(g2, g0, paired =TRUE)
t.test(g2, oj, paired =FALSE, var.equal =TRUE)
ggplot(dfc, aes(x=dose, y=len, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
library(ggplot2)
ggplot(dfc, aes(x=dose, y=len, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
ggplot(ToothGrowth, aes(x=dose, y=len, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
df <- ToothGrowth
dfc <- summarySE(df, measurevar="len", groupvars=c("supp","dose"))
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
dfc <- summarySE(df, measurevar="len", groupvars=c("supp","dose"))
View(dfc)
ggplot(dfc, aes(x=dose, y=len, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
ggplot(dfc, aes(x=dose, y=len, colour=supp, group=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_colour_hue(name="Supplement type", # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid"),
l=40) +                  # Use darker colors, lightness=40
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
scale_y_continuous(limits=c(0, max(dfc$len + dfc$se)),    # Set y range
breaks=0:20*4) +                       # Set tick every 4
theme_bw() +
theme(legend.justification=c(1,0), legend.position=c(1,0)) # Position legend in bottom right
data(ToothGrowth)
summary(ToothGrowth)
a <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, fun = mean)
a <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, FUN = mean)
View(a)
?se
a <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, FUN = mean_se)
View(a)
a <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, FUN = mean)
View(a)
a <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, FUN = sd)
View(a)
b <- aggregate(formula = len ~ supp + dose, data = ToothGrowth, FUN = mean)
cbind(a,b)
4.45/sqrt(10)
count
?count
?length
a <- aggregate(formula = len ~ ., data = ToothGrowth, FUN = mean)
View(a)
names(a)[3] <- "mean"
View(a)
names(b)[3] <- "sd"
b$se <- b$sd/sqrt(10)
df <- cbind(a, b)
View(df)
View(dfc)
View(df)
df <- subset(cbind(a, b), select = c(1, 2, 3, 6, 7))
View(df)
View(dfc)
ggplot(df, aes(x=dose, y=mean, colour=supp)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
geom_line() +
geom_point() + xlab("Dose (mg)") + ylab("Tooth length")
ggplot(df, aes(x=dose, y=mean, colour=supp)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2) +
geom_line() +
geom_point() + xlab("Dose (mg)") + ylab("Tooth length")
ggplot(df, aes(x=dose, y=mean, colour=supp)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.5) +
geom_line() +
geom_point() + xlab("Dose (mg)") + ylab("Tooth length")
ggplot(df, aes(x=dose, y=mean, colour=supp)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
geom_line() +
geom_point() + xlab("Dose (mg)") + ylab("Tooth length")
ggplot(df, aes(x=dose, y=mean, colour=supp)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.05) +
geom_line() +
geom_point() + xlab("Dose (mg)") + ylab("Tooth length")
oj.len <- subset(x = ToothGrowth, supp == "OJ", select = "len")
oj.len <- as.numeric(unlist(oj.len))
vc.len <- subset(x = ToothGrowth, supp == "VC", select = "len")
vc.len <- as.numeric(unlist(vc.len))
t.test(oj.len, vc.len, paired =FALSE)
t.test(g1, g0, paired =TRUE)$conf.int
t.test(g2, g1, paired =TRUE)$conf.int
data(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
table(mtcars$cyl)
library(swirl)
swirl()
swirl()
reset()
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
quit
exit
quit()
install.packages("RWeka")
.libPaths()
Sys.getenv
Sys.getenv()
WORKSPACE <- getwd()
paste(WORKSPACE, "jira.csv", sep = "\")
)
#
a
paste(WORKSPACE, "jira.csv", sep = "\")
paste(WORKSPACE, "jira.csv", sep = "\")
))))
)
a
paste#
pate
paste()
;
;
paste("a", "b", sep = "")
paste("a", "b", sep = "")
paste("a", "b", sep = "\")
)
setwd("C:/Users/duy.bui/Documents/GitHub/kuramoto")
paste(WORKSPACE, "jira.csv", sep = "/")
jira <- read.csv(file = paste(WORKSPACE, "jira.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
setwd("C:/Users/duy.bui/Documents/GitHub/kuramoto")
WORKSPACE <- getwd()
jira <- read.csv(file = paste(WORKSPACE, "jira.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
install.packages("igraph")
library(igraph)
tasks <- read.csv(file = paste(WORKSPACE, "effort_on_tasks.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
repos <- read.csv(file = paste(WORKSPACE, "effort_on_repos.csv", sep = "/"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, strip.white = TRUE)
View(jira)
View(repos)
table(duplicated((jira$Worker.Id)))
sub <- jira[1:1000,]
rm(sub)
t <- jira[1:1000,]
sub <- subset(t, select = c("Worker.Id", "Task.Id"))
t <- subset(t, select = c("Worker.Id", "Task.Id"))
rm(sub)
melt(t)
library(reshape2)
m <- melt(t)
View(m)
rm(m)
get.adjacency(graph.edgelist(as.matrix(t), directed=FALSE))
?graph.data.frame
matrix(3,4,5,2,3,4, nrow=2, ncol=3)
matrix(c(3,4,5,2,3,4), nrow=2, ncol=3)
table(duplicated(t$Task.Id))
View(t)
View(jira)
melt( t, id.vars = "Task.Id")
melt( t, id.vars = "Worker.Id")
View(t)
graph.data.frame(t)
t <- jira[1:100,]
t <- subset(t, select = c("Worker.Id", "Task.Id"))
table(t)
t2 <- as.data.frame(table(t))
View(t2)
t2 <- as.matrix(table(t))
view(t2)
t2
t2 <- as.matrix.data.frame(table(t))
View(t2)
t2 <- as.data.frame(table(t))
View(t2)
graph.data.frame(t2)
get.adjacency(graph.edgelist(as.matrix(2), directed=FALSE))
network <- graph.data.frame(t2)
plot(network)
V(bsk.network)
V(network)
E(network)
graph.adjacency(as.matrix(t2), mode = "undirected", weighted = T)
graph.adjacency(as.matrix(t2), weighted = T)
